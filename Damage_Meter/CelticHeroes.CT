<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>4</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>myDamage</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Allocate memory
alloc(newmem,2048)
alloc(myDamage,4)
alloc(myVictim,8)
alloc(myAttacker,8)
alloc(attackerID,4)
alloc(matchedNamePtr,8)

registersymbol(myDamage)
registersymbol(myVictim)
registersymbol(myAttacker)
registersymbol(attackerID)
registersymbol(matchedNamePtr)

label(code)
label(return)

newmem:
  // Capture values for logging
  mov [myAttacker], r13         // player doing damage
  mov [myVictim], rdi           // NPC taking damage
  mov [myDamage], eax           // damage amount

  // Store attacker ID from stack (likely entity/player ID)
  mov eax, [rsp+000000B0]
  mov [attackerID], eax

  // Try to capture name pointer (adjust +60 offset as needed)
  mov rax, [r13+60]
  mov [matchedNamePtr], rax

code:
  // Original game instructions
  mov [rdi+3C], eax
  mov eax, [rsp+000000B0]
  mov [rdi+40], eax
  jmp return

// Inject hook
GameAssembly.dll+1416531:
  jmp newmem
  nop
  nop
  nop

return:

[DISABLE]

// Restore original instructions
GameAssembly.dll+1416531:
  mov [rdi+3C], eax
  mov eax,[rsp+000000B0]
  mov [rdi+40], eax

// Unregister symbols
unregistersymbol(myDamage)
unregistersymbol(myVictim)
unregistersymbol(myAttacker)
unregistersymbol(attackerID)
unregistersymbol(matchedNamePtr)

// Free memory
dealloc(myDamage)
dealloc(myVictim)
dealloc(myAttacker)
dealloc(attackerID)
dealloc(matchedNamePtr)
dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>myVictim</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>myAttacker</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"No description"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>27632013B58</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>attackerID</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>8 Bytes</VariableType>
      <Address>playerListBase</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"matchedNamePtr"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>String</VariableType>
      <Length>32</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>matchedNamePtr</Address>
      <Offsets>
        <Offset>0</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"attackerID_str"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>String</VariableType>
      <Length>16</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>attackerID_str</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"No description"</Description>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>8 Bytes</VariableType>
      <Address>19411190818</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"No description"</Description>
      <VariableType>String</VariableType>
      <Length>4</Length>
      <Unicode>0</Unicode>
      <CodePage>0</CodePage>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>19324278E81</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Structures StructVersion="2">
    <Structure Name="myVictim" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" RLECount="9" OffsetHex="00000000" DisplayMethod="unsigned integer"/>
        <Element Offset="36" Vartype="Pointer" Bytesize="8" OffsetHex="00000024" DisplayMethod="unsigned integer"/>
        <Element Offset="40" Vartype="4 Bytes" Bytesize="4" RLECount="46" OffsetHex="00000028" DisplayMethod="unsigned integer"/>
        <Element Offset="224" Vartype="4 Bytes" Bytesize="4" OffsetHex="000000E0" DisplayMethod="hexadecimal"/>
        <Element Offset="228" Vartype="4 Bytes" Bytesize="4" RLECount="17" OffsetHex="000000E4" DisplayMethod="unsigned integer"/>
        <Element Offset="296" Vartype="Pointer" Bytesize="8" OffsetHex="00000128" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
    <Structure Name="myAttacker" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements/>
    </Structure>
    <Structure Name="myAttacker" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" RLECompression="1" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" OffsetHex="00000000" DisplayMethod="hexadecimal"/>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" RLECount="74" OffsetHex="00000004" DisplayMethod="unsigned integer"/>
      </Elements>
    </Structure>
  </Structures>
  <Comments>Info about this table:
</Comments>
  <LuaScript>-- Store last written values to avoid duplicates
local prevAttackerID = nil
local prevDamage = nil
local lfs = require("lfs")
-- Write bytes to file in append mode
local function bytes_to_file(filename, bytes)
  local file = io.open(filename, "ab")  -- append mode
  if not file then
    print("Failed to open file for writing: " .. filename)
    return false
  end

  for i = 1, #bytes do
    file:write(string.char(bytes[i]))
  end

  file:close()
  print("Appended " .. #bytes .. " bytes to " .. filename)
  return true
end

-- Convert integer to 4-byte little-endian array
local function intToBytesLE(int)
  local b1 = int % 256
  local b2 = math.floor(int / 256) % 256
  local b3 = math.floor(int / 65536) % 256
  local b4 = math.floor(int / 16777216) % 256
  return {b1, b2, b3, b4}
end

-- Convert string to hex pattern (for AOB scan)
local function stringToHexPattern(str)
  local pattern = {}
  for i = 1, #str do
    pattern[#pattern + 1] = string.format("%02X", string.byte(str, i))
  end
  return table.concat(pattern, " ")
end

-- Read raw bytes at address
local function readRawBytes(address, count)
  local bytes = readBytes(address, count, true)
  if not bytes then return nil end
  if type(bytes) == "number" then return {bytes} end
  if type(bytes) == "table" then return bytes end
  return nil
end

-- Main update function called every 10 ms
local function update()
  local attackerID = readInteger("attackerID")
  if not attackerID then
    print("Failed to read attackerID")
    return
  end

  local damage = readInteger("myDamage") or 0

  -- Skip if attackerID and damage unchanged
  if attackerID == prevAttackerID and damage == prevDamage then
    return
  end

  -- Update stored values
  prevAttackerID = attackerID
  prevDamage = damage

  local attackerIDStr = "(" .. tostring(attackerID) .. ")"
  local pattern = stringToHexPattern(attackerIDStr)

  local scanResults = AOBScan(pattern)
  if not scanResults or scanResults.Count == 0 then
    print("No matches found for pattern: " .. pattern)
    return
  end

  local addr = scanResults[0]
  if not addr then
    print("Failed to get first scan result")
    return
  end

  local numericAddr = tonumber("0x" .. addr)
  if not numericAddr then
    print("Failed to convert address to number")
    return
  end

  local bytesToReadBefore = 30
  local startAddrBefore = numericAddr - bytesToReadBefore

  local bytesBeforeExact = readRawBytes(startAddrBefore, bytesToReadBefore)
  if not bytesBeforeExact then
    print("Failed to read bytes before attackerID string")
    return
  end

  local attackerBytes = intToBytesLE(attackerID)
  local damageBytes = intToBytesLE(damage)

  for i = 1, #attackerBytes do
    table.insert(bytesBeforeExact, attackerBytes[i])
  end
  for i = 1, #damageBytes do
    table.insert(bytesBeforeExact, damageBytes[i])
  end




local basePath = lfs.currentdir() .. "\\"
local filename = basePath .. "bytes_before_attackerID.bin"

local success = bytes_to_file(filename, bytesBeforeExact)
if not success then
  print("Failed to write bytes to file")
end
end
-- Run update loop every 10 ms
while true do
  update()
  sleep(10)
end

</LuaScript>
</CheatTable>
